{"version":3,"file":"static/js/17.bb036b2e.chunk.js","mappings":"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","sources":["config/dashboardConfig.js"],"sourcesContent":["// NEW CRM Dashboard Configuration - Cross-domain integration with admin.sentratech.net\n// Provides reliable form submission with cross-domain API calls\n\nimport { set, get, keys, del } from 'idb-keyval';\n\n// Default rate limits per form type (in milliseconds)\nexport const RATE_LIMITS = {\n  'demo-request': 5000,\n  'roi-calculator': 10000,\n  'newsletter': 3000,\n  'contact-sales': 5000,\n  'job-application': 7000,\n  'pilot-request': 5000,\n  'chat-message': 3000\n};\n\n// Track last submission timestamps for rate limiting\nconst lastSubmissionTimestamps = {};\n\n// Track pending submissions per form type to prevent duplicates\nconst submittingForms = {};\n\n// Generic safe submission wrapper with duplicate prevention\nexport const safeSubmit = async (formType, payload, options = {}) => {\n  const {\n    disableDuration = 5000, // 5 seconds default\n    onSubmitStart = null,\n    onSubmitEnd = null,\n    onDuplicate = null\n  } = options;\n\n  // Check if this form type is already submitting\n  if (submittingForms[formType]) {\n    console.warn(`⚠️ ${formType} is already submitting. Blocking duplicate submission.`);\n    if (onDuplicate) onDuplicate();\n    return { success: false, reason: 'duplicate_submission', message: 'Form is already being submitted' };\n  }\n\n  // Mark as submitting\n  submittingForms[formType] = true;\n  console.log(`🔒 ${formType} submission started - blocking duplicates`);\n\n  // Trigger submit start callback (for UI updates)\n  if (onSubmitStart) onSubmitStart();\n\n  try {\n    // Call the rate-limited submission function\n    const result = await submitFormWithRateLimit(formType, payload);\n    console.log(`✅ ${formType} submitted successfully via safe submit`);\n    return result;\n  } catch (error) {\n    console.error(`❌ ${formType} submission error:`, error);\n    throw error;\n  } finally {\n    // Re-enable after specified duration to prevent immediate re-submit\n    setTimeout(() => {\n      submittingForms[formType] = false;\n      console.log(`🔓 ${formType} submission re-enabled after ${disableDuration}ms`);\n      if (onSubmitEnd) onSubmitEnd();\n    }, disableDuration);\n  }\n};\n\n// Get backend URL from environment - using local backend for proxy\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL || import.meta.env.REACT_APP_BACKEND_URL || 'http://localhost:8001';\n\n// Payload logging helper for debugging\nexport const logPayload = (formType, payload) => {\n  console.log(`📤 [${formType.toUpperCase()}] Sending payload:`, JSON.stringify(payload, null, 2));\n  console.log(`🔍 [${formType.toUpperCase()}] Payload summary:`, {\n    totalFields: Object.keys(payload).length,\n    requiredFields: Object.entries(payload).filter(([key, value]) => value && value !== '').length,\n    emptyFields: Object.entries(payload).filter(([key, value]) => !value || value === '').map(([key]) => key),\n    timestamp: new Date().toLocaleString()\n  });\n};\n\n// NEW CRM Dashboard configuration - Cross-domain integration\nexport const DASHBOARD_CONFIG = {\n  // Cross-domain proxy endpoints to admin.sentratech.net\n  ENDPOINTS: {\n    CONTACT_SALES: '/api/proxy/contact-sales',\n    DEMO_REQUEST: '/api/proxy/demo-request',\n    ROI_CALCULATOR: '/api/proxy/roi-calculator',\n    NEWSLETTER: '/api/proxy/newsletter-signup',\n    JOB_APPLICATION: '/api/proxy/job-application',\n    PILOT_REQUEST: '/api/proxy/pilot-request',\n    CHAT_MESSAGE: '/api/proxy/chat-message'\n  },\n  \n  // Healthcheck endpoint for connectivity testing\n  HEALTHCHECK_URL: '/api/health',\n  \n  // Dashboard API configuration (for reference only - all requests now go through proxy)\n  DASHBOARD_API: {\n    BASE_URL: process.env.REACT_APP_API_BASE || process.env.REACT_APP_BACKEND_URL + '/api' || 'https://sentratech.net/api',\n    ENDPOINTS: {\n      CONTACT_SALES: '/forms/contact-sales',\n      DEMO_REQUEST: '/forms/demo-request',\n      ROI_CALCULATOR: '/forms/roi-calculator', \n      NEWSLETTER: '/forms/newsletter-signup',\n      JOB_APPLICATION: '/forms/job-application',\n      PILOT_REQUEST: '/forms/pilot-request',\n      CHAT_MESSAGE: '/chat/message'\n    }\n  },\n  \n  // Authentication key for dashboard submissions\n  INGEST_KEY: 'a0d3f2b6c9e4d1784a92f3c1b5e6d0aa7c18e2f49b35c6d7e8f0a1b2c3d4e5f6',\n  \n  // Network configuration\n  TIMEOUT: {\n    DEFAULT: 10000, // 10 seconds\n    CHAT: 15000     // 15 seconds for chat responses\n  },\n  \n  // Retry configuration\n  RETRY: {\n    MAX_ATTEMPTS: 2,\n    DELAY: 1000\n  }\n};\n\n// Real network connectivity probe - more reliable than navigator.onLine\n// Comprehensive network debugging function\nexport const debugNetworkEnvironment = async () => {\n  console.log('🔬 COMPREHENSIVE NETWORK ENVIRONMENT DEBUGGING');\n  console.log('='.repeat(60));\n  \n  // 1. Environment Information\n  console.log('📊 Environment Info:', {\n    userAgent: navigator.userAgent,\n    origin: window.location.origin,\n    href: window.location.href,\n    cookieEnabled: navigator.cookieEnabled,\n    onLine: navigator.onLine,\n    language: navigator.language\n  });\n  \n  // 2. CORS Origin Detection\n  const possibleOrigins = [\n    window.location.origin,\n    process.env.REACT_APP_BACKEND_URL?.replace('/api', '') || 'https://sentratech.net',\n    'http://localhost:3000',\n    'http://localhost',\n    null // No Origin header\n  ];\n  \n  console.log('🌐 Testing different Origin headers...');\n  \n  for (const origin of possibleOrigins) {\n    try {\n      const headers = {\n        'Cache-Control': 'no-cache',\n        'Pragma': 'no-cache'\n      };\n      if (origin) headers['Origin'] = origin;\n      \n      const response = await fetch(`${BACKEND_URL}/health`, {\n        method: 'GET',\n        cache: 'no-cache',\n        headers\n      });\n      \n      console.log(`✅ Origin \"${origin}\": ${response.status} ${response.statusText}`, {\n        corsHeaders: {\n          allowOrigin: response.headers.get('access-control-allow-origin'),\n          allowMethods: response.headers.get('access-control-allow-methods'),\n          allowHeaders: response.headers.get('access-control-allow-headers'),\n          allowCredentials: response.headers.get('access-control-allow-credentials')\n        }\n      });\n    } catch (error) {\n      console.error(`❌ Origin \"${origin}\": ${error.message}`);\n    }\n  }\n  \n  // 3. Test CORS Preflight (OPTIONS)\n  console.log('🔍 Testing CORS preflight (OPTIONS)...');\n  try {\n    const preflightResponse = await fetch(`${BACKEND_URL}/forms/newsletter-signup`, {\n      method: 'OPTIONS',\n      headers: {\n        'Origin': window.location.origin,\n        'Access-Control-Request-Method': 'POST',\n        'Access-Control-Request-Headers': 'content-type,origin'\n      }\n    });\n    \n    console.log('✅ CORS Preflight:', {\n      status: preflightResponse.status,\n      statusText: preflightResponse.statusText,\n      headers: Object.fromEntries(preflightResponse.headers.entries())\n    });\n  } catch (error) {\n    console.error('❌ CORS Preflight failed:', error.message);\n  }\n  \n  // 4. Service Worker Detection\n  if ('serviceWorker' in navigator) {\n    const registrations = await navigator.serviceWorker.getRegistrations();\n    console.log('🔧 Service Worker status:', {\n      supported: true,\n      registrations: registrations.length,\n      active: registrations.map(reg => ({\n        scope: reg.scope,\n        state: reg.active?.state,\n        updateViaCache: reg.updateViaCache\n      }))\n    });\n  } else {\n    console.log('🔧 Service Worker: Not supported');\n  }\n  \n  console.log('='.repeat(60));\n  return true;\n};\n\nexport const hasNetwork = async () => {\n  try {\n    console.log('🔍 Probing network connectivity...');\n    \n    // Run comprehensive debugging first\n    await debugNetworkEnvironment();\n    \n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 5000);\n    \n    // Determine correct origin for network requests\n    const actualOrigin = window.location.origin;\n    const isLocalDevelopment = actualOrigin.includes('localhost');\n    const fallbackOrigin = process.env.REACT_APP_BACKEND_URL?.replace('/api', '') || 'https://sentratech.net';\n    const networkOrigin = isLocalDevelopment \n      ? fallbackOrigin // Use environment variable fallback for localhost testing\n      : actualOrigin;\n    \n    console.log(`🎯 Browser origin: ${actualOrigin}`);\n    console.log(`🌐 Network origin: ${networkOrigin} ${isLocalDevelopment ? '(localhost→preview mapping)' : '(production)'}`);\n    \n    const BACKEND_URL = (typeof process !== 'undefined' && process.env?.REACT_APP_BACKEND_URL) \n      ? process.env.REACT_APP_BACKEND_URL \n      : window.location.origin;\n    const healthUrl = `${BACKEND_URL}${DASHBOARD_CONFIG.HEALTHCHECK_URL}`;\n    \n    const response = await fetch(healthUrl, {\n      method: 'GET',\n      cache: 'no-cache',\n      signal: controller.signal,\n      headers: {\n        'Cache-Control': 'no-cache',\n        'Pragma': 'no-cache',\n        'Origin': actualOrigin\n      }\n    });\n    \n    clearTimeout(timeoutId);\n    const hasConnectivity = response.ok || (response.status >= 400 && response.status < 500);\n    console.log(`🌐 Network connectivity probe result: ${hasConnectivity ? '✅ ONLINE' : '❌ OFFLINE'} (${response.status})`);\n    return hasConnectivity;\n  } catch (error) {\n    console.log(`🌐 Network connectivity probe failed: ❌ OFFLINE (${error.message})`);\n    return false;\n  }\n};\n\n// Legacy function for backward compatibility - but use hasNetwork() instead\nexport const isOnline = () => {\n  console.warn('⚠️ isOnline() is deprecated - use hasNetwork() for reliable connectivity detection');\n  return navigator.onLine;\n};\n\n// NEW CRM Dashboard form submission - Cross-domain integration with admin.sentratech.net\nexport const submitFormToDashboard = async (endpoint, data, options = {}) => {\n  const {\n    timeout = DASHBOARD_CONFIG.TIMEOUT.DEFAULT,\n    retries = DASHBOARD_CONFIG.RETRY.MAX_ATTEMPTS\n  } = options;\n\n  // Get backend URL - handle both development and production environments\n  const BACKEND_URL = (typeof process !== 'undefined' && process.env?.REACT_APP_BACKEND_URL) \n    ? process.env.REACT_APP_BACKEND_URL \n    : window.location.origin;\n\n  console.log(`🎯 BACKEND PROXY SUBMISSION:`, {\n    endpoint,\n    backendUrl: BACKEND_URL,\n    data,\n    timestamp: new Date().toISOString()\n  });\n\n  let lastError = null;\n  \n  // Try network submission with retries\n  for (let attempt = 1; attempt <= retries; attempt++) {\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), timeout);\n      \n      // Use backend proxy endpoints with API key authentication\n      const fullUrl = `${BACKEND_URL}${endpoint}`;\n      const actualOrigin = window.location.origin;\n      \n      console.log(`🌐 BACKEND PROXY SUBMISSION (attempt ${attempt}/${retries}):`, {\n        url: fullUrl,\n        method: 'POST',\n        data: JSON.stringify(data, null, 2),\n        browserOrigin: actualOrigin,\n        backendUrl: BACKEND_URL,\n        proxyEndpoint: endpoint,\n        timestamp: new Date().toISOString()\n      });\n      \n      // Log curl equivalent\n      console.log(`🐛 CURL EQUIVALENT:`, `curl -X POST \"${fullUrl}\" -H \"Content-Type: application/json\" -H \"Origin: ${actualOrigin}\" -d '${JSON.stringify(data)}'`);\n      \n      const response = await fetch(fullUrl, {\n        method: 'POST',\n        mode: 'cors',\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'Origin': actualOrigin\n        },\n        body: JSON.stringify(data),\n        signal: controller.signal\n      });\n      \n      clearTimeout(timeoutId);\n      \n      console.log(`📡 Network response received:`, {\n        status: response.status,\n        statusText: response.statusText,\n        headers: Object.fromEntries(response.headers.entries()),\n        url: response.url // Show the actual URL that responded\n      });\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`❌ HTTP Error ${response.status}:`, errorText);\n        throw new Error(`HTTP ${response.status}: ${response.statusText} - ${errorText}`);\n      }\n      \n      const result = await response.json();\n      console.log(`✅ Network submission successful:`, result);\n      \n      return {\n        success: true,\n        data: result,\n        mode: 'network',\n        attempt\n      };\n      \n    } catch (error) {\n      lastError = error;\n      console.error(`❌ Network submission attempt ${attempt}/${retries} failed:`, {\n        error: error.message,\n        name: error.name,\n        stack: error.stack\n      });\n      \n      // Wait before retry (except on last attempt)\n      if (attempt < retries) {\n        await new Promise(resolve => setTimeout(resolve, DASHBOARD_CONFIG.RETRY.DELAY));\n      }\n    }\n  }\n  \n  // All network attempts failed, queue for retry and use offline fallback\n  console.error('🚨 NETWORK SUBMISSION FAILED - All attempts failed:', {\n    endpoint,\n    attempts: retries,\n    lastError: lastError?.message,\n    stack: lastError?.stack,\n    data: JSON.stringify(data, null, 2)\n  });\n  \n  // Queue the submission for retry when online\n  const queueKey = await queueFormSubmission(endpoint, data, options.formType || 'unknown');\n  \n  return {\n    success: true,\n    data: { ...data, id: `fallback_${Date.now()}`, queueKey },\n    mode: 'fallback',\n    error: lastError?.message\n  };\n};\n\n// Rate-limited form submission wrapper\nexport const submitFormWithRateLimit = async (formType, formData, options = {}) => {\n  const now = Date.now();\n  const key = `${formType}_${formData.email || 'anon'}`;\n  const limit = RATE_LIMITS[formType] ?? 5000;\n\n  // Check if we're submitting too fast\n  if (lastSubmissionTimestamps[key] && (now - lastSubmissionTimestamps[key]) < limit) {\n    const remainingTime = Math.ceil((limit - (now - lastSubmissionTimestamps[key]))/1000);\n    console.warn(`⚠️ ${formType} rate limited: please wait ${remainingTime}s before submitting again`);\n    \n    return { \n      success: false, \n      reason: 'rate_limited',\n      remainingTime,\n      message: `Please wait ${remainingTime} seconds before submitting again`\n    };\n  }\n\n  // Update timestamp before submission to prevent race conditions\n  lastSubmissionTimestamps[key] = now;\n  \n  // Get the correct direct dashboard endpoint based on form type\n  const endpointMap = {\n    'demo-request': DASHBOARD_CONFIG.ENDPOINTS.DEMO_REQUEST,\n    'roi-calculator': DASHBOARD_CONFIG.ENDPOINTS.ROI_CALCULATOR,\n    'newsletter': DASHBOARD_CONFIG.ENDPOINTS.NEWSLETTER,\n    'contact-sales': DASHBOARD_CONFIG.ENDPOINTS.CONTACT_SALES,\n    'job-application': DASHBOARD_CONFIG.ENDPOINTS.JOB_APPLICATION,\n    'pilot-request': DASHBOARD_CONFIG.ENDPOINTS.PILOT_REQUEST,\n    'chat-message': DASHBOARD_CONFIG.ENDPOINTS.CHAT_MESSAGE\n  };\n  \n  const endpoint = endpointMap[formType];\n  if (!endpoint) {\n    console.error(`❌ Unknown form type: ${formType}`);\n    return {\n      success: false,\n      reason: 'invalid_form_type',\n      message: `Unknown form type: ${formType}`\n    };\n  }\n  \n  // Call the original function that sends to the proxy\n  try {\n    const result = await submitFormToDashboard(endpoint, formData, { ...options, formType });\n    \n    // Track successful rate-limited submission\n    console.log(`✅ Rate-limited ${formType} submission successful:`, {\n      formType,\n      email: formData.email,\n      mode: result.mode,\n      rateLimit: `${limit}ms`\n    });\n    \n    return result;\n  } catch (error) {\n    // Reset timestamp on error so user can retry immediately\n    delete lastSubmissionTimestamps[key];\n    throw error;\n  }\n};\n\n// Rate-limited chat message submission\nexport const submitChatMessageWithRateLimit = async (message, conversationId = null) => {\n  const now = Date.now();\n  const key = `chat-message_${conversationId || 'anon'}`;\n  const limit = RATE_LIMITS['chat-message'] ?? 3000;\n\n  // Check if we're submitting too fast\n  if (lastSubmissionTimestamps[key] && (now - lastSubmissionTimestamps[key]) < limit) {\n    const remainingTime = Math.ceil((limit - (now - lastSubmissionTimestamps[key]))/1000);\n    console.warn(`⚠️ Chat rate limited: please wait ${remainingTime}s before sending another message`);\n    \n    return { \n      success: false, \n      reason: 'rate_limited',\n      remainingTime,\n      message: `Please wait ${remainingTime} seconds before sending another message`\n    };\n  }\n\n  // Update timestamp before submission to prevent race conditions\n  lastSubmissionTimestamps[key] = now;\n  \n  try {\n    const result = await submitChatMessage(message, conversationId);\n    console.log(`✅ Rate-limited chat message successful:`, {\n      conversationId,\n      mode: result.mode,\n      rateLimit: `${limit}ms`\n    });\n    return result;\n  } catch (error) {\n    // Reset timestamp on error so user can retry immediately\n    delete lastSubmissionTimestamps[key];\n    throw error;\n  }\n};\n\n// Submit chat message with robust connectivity testing\nexport const submitChatMessage = async (message, conversationId = null) => {\n  // Real connectivity test before attempting chat submission\n  try {\n    const networkAvailable = await hasNetwork();\n    if (!networkAvailable) {\n      console.warn('🌐 Chat: Network connectivity probe failed - using offline response');\n      return generateOfflineResponse(message);\n    }\n  } catch (probeError) {\n    console.warn('🌐 Chat: Network probe error - using offline response:', probeError.message);\n    return generateOfflineResponse(message);\n  }\n\n  try {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), DASHBOARD_CONFIG.TIMEOUT.CHAT);\n    \n    const BACKEND_URL = (typeof process !== 'undefined' && process.env?.REACT_APP_BACKEND_URL) \n      ? process.env.REACT_APP_BACKEND_URL \n      : window.location.origin;\n    const chatEndpoint = `${BACKEND_URL}${DASHBOARD_CONFIG.ENDPOINTS.CHAT_MESSAGE}`;\n    \n    const response = await fetch(chatEndpoint, {\n      method: 'POST',\n      mode: 'cors',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Origin': window.location.origin\n      },\n      body: JSON.stringify({\n        message,\n        conversation_id: conversationId,\n        timestamp: new Date().toISOString()\n      }),\n      signal: controller.signal\n    });\n    \n    clearTimeout(timeoutId);\n    \n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    \n    const result = await response.json();\n    \n    return {\n      success: true,\n      response: result.response,\n      conversationId: result.conversation_id,\n      mode: 'network'\n    };\n    \n  } catch (error) {\n    console.warn('Chat network submission failed, using offline response:', error.message);\n    return generateOfflineResponse(message);\n  }\n};\n\n// Generate simulated AI responses for offline mode\nexport const generateOfflineResponse = (message) => {\n  const responses = [\n    \"Thank you for your message! Our AI system will help you find the right solution. Since we're currently offline, here's some general guidance.\",\n    \"I understand you're looking for information about SentraTech. While our full AI system is temporarily unavailable, I can share that we specialize in intelligent customer support automation.\",\n    \"Thanks for reaching out! SentraTech offers AI-powered customer support solutions that can transform your business operations. Our team will follow up with detailed information soon.\",\n    \"I appreciate your interest in our services. SentraTech provides cutting-edge AI solutions for customer support, including automated triage, sentiment analysis, and intelligent routing.\",\n    \"Hello! While our real-time AI system is momentarily offline, I want you to know that SentraTech helps businesses automate up to 70% of their customer interactions while maintaining quality.\"\n  ];\n  \n  // Simple keyword-based response selection\n  const lowerMessage = message.toLowerCase();\n  let selectedResponse = responses[0]; // default\n  \n  if (lowerMessage.includes('pricing') || lowerMessage.includes('cost') || lowerMessage.includes('price')) {\n    selectedResponse = \"For pricing information, please check our pricing page or contact our sales team. We offer flexible plans starting from our Starter package.\";\n  } else if (lowerMessage.includes('demo') || lowerMessage.includes('trial')) {\n    selectedResponse = \"I'd love to show you a demo! Please fill out our demo request form and our team will schedule a personalized walkthrough of SentraTech's capabilities.\";\n  } else if (lowerMessage.includes('integration') || lowerMessage.includes('api')) {\n    selectedResponse = \"SentraTech integrates seamlessly with popular CRMs, help desk systems, and communication platforms. Our API documentation and integration team make setup straightforward.\";\n  } else if (lowerMessage.includes('support') || lowerMessage.includes('help')) {\n    selectedResponse = \"Our support team is here to help! You can reach us through live chat, email at support@sentratech.net, or phone. We offer 24/7 support for Enterprise customers.\";\n  } else {\n    // Random selection for general messages\n    selectedResponse = responses[Math.floor(Math.random() * responses.length)];\n  }\n  \n  return {\n    success: true,\n    response: selectedResponse,\n    conversationId: `offline_${Date.now()}`,\n    mode: 'offline'\n  };\n};\n\n// Show success message with proper styling\nexport const showSuccessMessage = (message, data = null) => {\n  console.log('✅ Form submission successful:', message, data);\n  \n  // You can extend this to show toast notifications or other UI feedback\n  if (window && window.dataLayer) {\n    window.dataLayer.push({\n      event: 'form_submission_success',\n      form_type: data?.form_type || 'unknown',\n      submission_mode: data?.mode || 'unknown',\n      timestamp: new Date().toISOString()\n    });\n  }\n};\n\n// Retry queue functionality for offline-to-online synchronization\nexport const queueFormSubmission = async (endpoint, data, formType) => {\n  try {\n    const queueKey = `queue_${formType}_${Date.now()}`;\n    const queueData = {\n      endpoint,\n      data,\n      formType,\n      timestamp: new Date().toISOString(),\n      retryCount: 0\n    };\n    \n    await set(queueKey, queueData);\n    console.log('Form submission queued for retry:', queueKey);\n    return queueKey;\n  } catch (error) {\n    console.error('Failed to queue form submission:', error);\n    return null;\n  }\n};\n\n// Flush queued submissions when online\nexport const flushQueuedSubmissions = async () => {\n  if (!isOnline()) {\n    console.log('Still offline, skipping queue flush');\n    return;\n  }\n\n  try {\n    const allKeys = await keys();\n    const queueKeys = allKeys.filter(key => typeof key === 'string' && key.startsWith('queue_'));\n    \n    if (queueKeys.length === 0) {\n      console.log('No queued submissions to flush');\n      return;\n    }\n\n    console.log(`Flushing ${queueKeys.length} queued submissions...`);\n    \n    for (const key of queueKeys) {\n      try {\n        const queueData = await get(key);\n        if (!queueData) continue;\n\n        // Increment retry count\n        queueData.retryCount = (queueData.retryCount || 0) + 1;\n        \n        // Try to submit\n        const result = await submitFormToDashboard(\n          queueData.endpoint,\n          queueData.data,\n          { retries: 1 } // Single retry for queued items\n        );\n\n        if (result.success && result.mode === 'network') {\n          // Successfully submitted via network, remove from queue\n          await del(key);\n          console.log('✅ Queued submission successful:', key);\n          \n          // Track successful queue flush\n          if (window?.dataLayer) {\n            window.dataLayer.push({\n              event: 'queued_form_submit_success',\n              form_type: queueData.formType,\n              queue_key: key,\n              retry_count: queueData.retryCount\n            });\n          }\n        } else if (queueData.retryCount >= 3) {\n          // Max retries reached, remove from queue\n          await del(key);\n          console.warn('❌ Max retries reached for queued submission:', key);\n        } else {\n          // Update retry count and keep in queue\n          await set(key, queueData);\n          console.log('🔄 Queued submission failed, will retry later:', key);\n        }\n        \n      } catch (error) {\n        console.error('Error processing queued submission:', key, error);\n      }\n    }\n    \n  } catch (error) {\n    console.error('Error flushing queued submissions:', error);\n  }\n};\n\n// Setup automatic queue flushing\nexport const setupQueueFlushing = () => {\n  // Flush on page load if online  \n  if (isOnline()) {\n    setTimeout(flushQueuedSubmissions, 2000);\n  }\n  \n  // Flush when browser comes online\n  window.addEventListener('online', () => {\n    console.log('Browser came online, flushing queued submissions...');\n    setTimeout(flushQueuedSubmissions, 1000);\n  });\n  \n  // Periodic flush every 5 minutes if online\n  setInterval(() => {\n    if (isOnline()) {\n      flushQueuedSubmissions();\n    }\n  }, 5 * 60 * 1000);\n};\n\n// Test for proxy/caching interference\nexport const testProxyInterference = async () => {\n  console.log('🔍 Testing for proxy/cache interference...');\n  \n  const testUrl = `${BACKEND_URL}/forms/newsletter-signup`;\n  const uniqueId = Date.now();\n  const testData = { email: `proxy-test-${uniqueId}@example.com`, test: true };\n  \n  // Test 1: Direct fetch without any special headers\n  try {\n    const response1 = await fetch(testUrl, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(testData)\n    });\n    console.log('✅ Direct POST (no Origin):', {\n      status: response1.status,\n      headers: Object.fromEntries(response1.headers.entries()),\n      url: response1.url\n    });\n    const result1 = await response1.json();\n    console.log('📝 Response body:', result1);\n  } catch (error) {\n    console.error('❌ Direct POST failed:', error.message);\n  }\n  \n  // Test 2: With Origin header\n  try {\n    const response2 = await fetch(testUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Origin': window.location.origin\n      },\n      body: JSON.stringify({ ...testData, withOrigin: true })\n    });\n    console.log('✅ POST with Origin:', {\n      status: response2.status,\n      headers: Object.fromEntries(response2.headers.entries()),\n      url: response2.url\n    });\n    const result2 = await response2.json();\n    console.log('📝 Response body:', result2);\n  } catch (error) {\n    console.error('❌ POST with Origin failed:', error.message);\n  }\n  \n  // Test 3: Force bypass cache\n  try {\n    const response3 = await fetch(`${testUrl}?t=${uniqueId}`, {\n      method: 'POST',\n      cache: 'no-store',\n      headers: {\n        'Content-Type': 'application/json',\n        'Origin': window.location.origin,\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache'\n      },\n      body: JSON.stringify({ ...testData, cacheBypass: true })\n    });\n    console.log('✅ POST with cache bypass:', {\n      status: response3.status,\n      headers: Object.fromEntries(response3.headers.entries()),\n      url: response3.url\n    });\n    const result3 = await response3.json();\n    console.log('📝 Response body:', result3);\n  } catch (error) {\n    console.error('❌ POST with cache bypass failed:', error.message);\n  }\n};\n\n// Ensure dashboard is in live mode (disable any mock/local data modes)\nexport const ensureLiveMode = () => {\n  // Disable any potential mock configurations\n  if (typeof window !== 'undefined') {\n    window.dashboardConfig = {\n      ...window.dashboardConfig,\n      mock: false,\n      localDataMode: false,\n      fallback: false,\n      testMode: false\n    };\n    \n    // Clear any test flags from localStorage\n    try {\n      localStorage.removeItem('dashboard_mock_mode');\n      localStorage.removeItem('dashboard_test_mode');\n      localStorage.removeItem('local_data_mode');\n    } catch (error) {\n      console.warn('Could not clear localStorage flags:', error);\n    }\n  }\n  \n  console.log('🎯 Dashboard configured for LIVE mode - all submissions will go to production');\n};\n\n// Initialize queue flushing and ensure live mode on import\nsetupQueueFlushing();\nensureLiveMode();\n\nexport default DASHBOARD_CONFIG;"],"names":["RATE_LIMITS","lastSubmissionTimestamps","submittingForms","safeSubmit","async","formType","payload","options","arguments","length","undefined","disableDuration","onSubmitStart","onSubmitEnd","onDuplicate","console","warn","concat","success","reason","message","log","result","submitFormWithRateLimit","error","setTimeout","BACKEND_URL","process","logPayload","toUpperCase","JSON","stringify","totalFields","Object","keys","requiredFields","entries","filter","_ref","key","value","emptyFields","_ref2","map","_ref3","timestamp","Date","toLocaleString","DASHBOARD_CONFIG","ENDPOINTS","CONTACT_SALES","DEMO_REQUEST","ROI_CALCULATOR","NEWSLETTER","JOB_APPLICATION","PILOT_REQUEST","CHAT_MESSAGE","HEALTHCHECK_URL","DASHBOARD_API","BASE_URL","INGEST_KEY","TIMEOUT","DEFAULT","CHAT","RETRY","MAX_ATTEMPTS","DELAY","debugNetworkEnvironment","_process$env$REACT_AP","repeat","userAgent","navigator","origin","window","location","href","cookieEnabled","onLine","language","possibleOrigins","replace","headers","response","fetch","method","cache","status","statusText","corsHeaders","allowOrigin","get","allowMethods","allowHeaders","allowCredentials","preflightResponse","fromEntries","registrations","serviceWorker","getRegistrations","supported","active","reg","_reg$active","scope","state","updateViaCache","hasNetwork","_process$env$REACT_AP2","_process$env","controller","AbortController","timeoutId","abort","actualOrigin","isLocalDevelopment","includes","fallbackOrigin","networkOrigin","REACT_APP_BACKEND_URL","healthUrl","signal","clearTimeout","hasConnectivity","ok","isOnline","submitFormToDashboard","endpoint","data","_process$env2","_lastError","_lastError2","_lastError3","timeout","retries","backendUrl","toISOString","lastError","attempt","fullUrl","url","browserOrigin","proxyEndpoint","mode","credentials","body","errorText","text","Error","json","name","stack","Promise","resolve","attempts","queueKey","queueFormSubmission","_objectSpread","id","now","formData","_RATE_LIMITS$formType","email","limit","remainingTime","Math","ceil","rateLimit","submitChatMessageWithRateLimit","_RATE_LIMITS$chatMes","conversationId","submitChatMessage","generateOfflineResponse","probeError","_process$env3","chatEndpoint","conversation_id","responses","lowerMessage","toLowerCase","selectedResponse","floor","random","showSuccessMessage","dataLayer","push","event","form_type","submission_mode","queueData","retryCount","set","flushQueuedSubmissions","queueKeys","startsWith","_window","del","queue_key","retry_count","addEventListener","setInterval","ensureLiveMode","dashboardConfig","mock","localDataMode","fallback","testMode","localStorage","removeItem"],"sourceRoot":""}