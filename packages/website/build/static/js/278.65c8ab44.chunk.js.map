{"version":3,"file":"static/js/278.65c8ab44.chunk.js","mappings":"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","sources":["utils/diagnostics.js"],"sourcesContent":["// Comprehensive Diagnostic Tool for Dashboard Integration Issues\n// This will capture everything about the submission process\n\nexport const runComprehensiveDiagnostics = async () => {\n  console.log('üî¨ STARTING COMPREHENSIVE DIAGNOSTIC SESSION');\n  console.log('=' .repeat(80));\n  \n  const diagnosticData = {\n    timestamp: new Date().toISOString(),\n    environment: {},\n    network: {},\n    requests: [],\n    errors: []\n  };\n  \n  try {\n    // 1. Environment Detection\n    diagnosticData.environment = {\n      userAgent: navigator.userAgent,\n      currentURL: window.location.href,\n      origin: window.location.origin,\n      hostname: window.location.hostname,\n      protocol: window.location.protocol,\n      port: window.location.port,\n      cookieEnabled: navigator.cookieEnabled,\n      onLine: navigator.onLine,\n      language: navigator.language,\n      platform: navigator.platform,\n      timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone\n    };\n    \n    console.log('üìä Environment:', diagnosticData.environment);\n    \n    // 2. Network Configuration Check\n    const { DASHBOARD_CONFIG } = await import('../config/dashboardConfig.js');\n    const BACKEND_URL = process.env.REACT_APP_BACKEND_URL || import.meta.env.REACT_APP_BACKEND_URL;\n    \n    diagnosticData.network = {\n      backendURL: BACKEND_URL,\n      newsletterEndpoint: DASHBOARD_CONFIG.ENDPOINTS.NEWSLETTER,\n      fullURL: `${BACKEND_URL}${DASHBOARD_CONFIG.ENDPOINTS.NEWSLETTER}`,\n      healthCheckURL: `${BACKEND_URL}${DASHBOARD_CONFIG.HEALTHCHECK_URL}`\n    };\n    \n    console.log('üåê Network Config:', diagnosticData.network);\n    \n    // 3. Test Actual Form Submission Process\n    const testEmail = `diagnostic-${Date.now()}@example.com`;\n    const testData = {\n      email: testEmail,\n      source: 'diagnostic_test',\n      timestamp: new Date().toISOString()\n    };\n    \n    console.log('üß™ Testing form submission with:', testData);\n    \n    // 4. Capture Network Request Details\n    const { submitFormToDashboard } = await import('../config/dashboardConfig.js');\n    \n    // Override fetch temporarily to capture request details\n    const originalFetch = window.fetch;\n    window.fetch = async (...args) => {\n      const [url, options] = args;\n      \n      const requestDetails = {\n        url: url,\n        method: options?.method || 'GET',\n        headers: options?.headers || {},\n        body: options?.body || null,\n        timestamp: new Date().toISOString()\n      };\n      \n      console.log('üì° CAPTURED REQUEST:', requestDetails);\n      diagnosticData.requests.push(requestDetails);\n      \n      try {\n        const response = await originalFetch(...args);\n        \n        const responseDetails = {\n          status: response.status,\n          statusText: response.statusText,\n          headers: Object.fromEntries(response.headers.entries()),\n          url: response.url,\n          timestamp: new Date().toISOString()\n        };\n        \n        console.log('üì• CAPTURED RESPONSE:', responseDetails);\n        requestDetails.response = responseDetails;\n        \n        // Clone response to read body without consuming it\n        const responseClone = response.clone();\n        try {\n          const responseBody = await responseClone.text();\n          requestDetails.responseBody = responseBody;\n          console.log('üìÑ RESPONSE BODY:', responseBody);\n        } catch (e) {\n          console.log('‚ö†Ô∏è Could not read response body:', e.message);\n        }\n        \n        return response;\n      } catch (error) {\n        console.error('‚ùå REQUEST FAILED:', error);\n        requestDetails.error = error.message;\n        diagnosticData.errors.push({\n          type: 'fetch_error',\n          message: error.message,\n          stack: error.stack,\n          timestamp: new Date().toISOString()\n        });\n        throw error;\n      }\n    };\n    \n    // 5. Perform Actual Submission\n    try {\n      const result = await submitFormToDashboard(\n        DASHBOARD_CONFIG.ENDPOINTS.NEWSLETTER,\n        testData,\n        { formType: 'diagnostic_test' }\n      );\n      \n      console.log('‚úÖ FORM SUBMISSION RESULT:', result);\n      diagnosticData.submissionResult = result;\n      \n    } catch (error) {\n      console.error('‚ùå FORM SUBMISSION FAILED:', error);\n      diagnosticData.errors.push({\n        type: 'submission_error',\n        message: error.message,\n        stack: error.stack,\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n    // Restore original fetch\n    window.fetch = originalFetch;\n    \n    // 6. Generate Report\n    console.log('üìã DIAGNOSTIC REPORT:');\n    console.log('=' .repeat(80));\n    console.log('üîç TEST EMAIL FOR DASHBOARD VERIFICATION:', testEmail);\n    console.log('üìä Total Requests Captured:', diagnosticData.requests.length);\n    console.log('‚ùå Total Errors:', diagnosticData.errors.length);\n    console.log('üìÑ Full Diagnostic Data:', JSON.stringify(diagnosticData, null, 2));\n    console.log('=' .repeat(80));\n    \n    // 7. Create Dashboard Verification Instructions\n    const verificationInstructions = {\n      testEmail: testEmail,\n      expectedID: diagnosticData.submissionResult?.data?.id,\n      timestamp: diagnosticData.timestamp,\n      instructions: [\n        `Check dashboard for email: ${testEmail}`,\n        `Expected ID: ${diagnosticData.submissionResult?.data?.id || 'N/A'}`,\n        `Timestamp: ${diagnosticData.timestamp}`,\n        'If this entry does NOT appear in dashboard, there is a backend/database issue',\n        'If this entry DOES appear, the issue is with your specific browser/network'\n      ]\n    };\n    \n    console.log('üéØ DASHBOARD VERIFICATION:', verificationInstructions);\n    \n    return {\n      diagnosticData,\n      verificationInstructions,\n      testEmail\n    };\n    \n  } catch (error) {\n    console.error('‚ùå DIAGNOSTIC SESSION FAILED:', error);\n    diagnosticData.errors.push({\n      type: 'diagnostic_error',\n      message: error.message,\n      stack: error.stack,\n      timestamp: new Date().toISOString()\n    });\n    \n    return {\n      diagnosticData,\n      error: error.message\n    };\n  }\n};\n\nexport default runComprehensiveDiagnostics;"],"names":["runComprehensiveDiagnostics","async","console","log","repeat","diagnosticData","timestamp","Date","toISOString","environment","network","requests","errors","_diagnosticData$submi","_diagnosticData$submi2","_diagnosticData$submi3","_diagnosticData$submi4","userAgent","navigator","currentURL","window","location","href","origin","hostname","protocol","port","cookieEnabled","onLine","language","platform","timeZone","Intl","DateTimeFormat","resolvedOptions","DASHBOARD_CONFIG","BACKEND_URL","process","backendURL","newsletterEndpoint","ENDPOINTS","NEWSLETTER","fullURL","concat","healthCheckURL","HEALTHCHECK_URL","testEmail","now","testData","email","source","submitFormToDashboard","originalFetch","fetch","_len","arguments","length","args","Array","_key","url","options","requestDetails","method","headers","body","push","response","responseDetails","status","statusText","Object","fromEntries","entries","responseClone","clone","responseBody","text","e","message","error","type","stack","result","formType","submissionResult","JSON","stringify","verificationInstructions","expectedID","data","id","instructions"],"sourceRoot":""}