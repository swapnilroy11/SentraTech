# SentraTech Multi-Stage Build Dockerfile (Optimized with Layer Caching)
# Stage 1: Build the React application inside the container
FROM node:18 as builder

# Set NODE_OPTIONS for memory optimization
ENV NODE_OPTIONS="--max_old_space_size=4096"

# Set working directory
WORKDIR /usr/src/app

# Copy package files first for better caching
COPY frontend/package.json frontend/yarn.lock ./

# Install yarn globally and dependencies (cached layer if package.json unchanged)
RUN npm install -g yarn && \
    yarn install --frozen-lockfile --production=false

# DEBUG: Verify dependencies installed
RUN echo "=== DEPENDENCIES VERIFICATION ===" && \
    ls -la node_modules/ | head -10 && \
    echo "node_modules size: $(du -sh node_modules/)"

# Copy source code (separate layer for better caching)
COPY frontend/ ./

# DEBUG: Show what was copied
RUN echo "=== SOURCE CODE VERIFICATION ===" && \
    ls -la && \
    echo "Key directories:" && \
    ls -la src/ public/

# Build the application
RUN echo "=== STARTING BUILD ===" && \
    yarn build && \
    echo "=== BUILD COMPLETED ==="

# DEBUG: Verify build output
RUN echo "=== BUILD OUTPUT VERIFICATION ===" && \
    ls -la dist/ && \
    echo "Build size: $(du -sh dist/)" && \
    echo "Key files:" && \
    find dist/ -name "*.html" -o -name "*.js" -o -name "*.css" | head -10

# Stage 2: Production nginx server
FROM nginx:alpine

# Copy built application
COPY --from=builder /usr/src/app/dist /usr/share/nginx/html

# Copy nginx config if exists
COPY --from=builder /usr/src/app/nginx.conf /etc/nginx/conf.d/default.conf 2>/dev/null || true

# Final verification
RUN echo "=== PRODUCTION IMAGE READY ===" && \
    ls -la /usr/share/nginx/html && \
    echo "Ready to serve $(find /usr/share/nginx/html -name "*.html" | wc -l) HTML files"

EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]